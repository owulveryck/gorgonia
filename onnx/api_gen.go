package onnx

import (
	"gonum.org/v1/gonum/graph"
	"gorgonia.org/gorgonia/internal/engine"
)

// Code generated by genapi, which is a API generation tool for Gorgonia. DO NOT EDIT.

// Abs performs a pointwise abs.
type Abs struct{}

// Constructor to fulfil the interface ...
func (a *Abs) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewAbsOperation()(g, n.(*engine.Node))
	}
}

// Sign performs a pointwise sign.
type Sign struct{}

// Constructor to fulfil the interface ...
func (a *Sign) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewSignOperation()(g, n.(*engine.Node))
	}
}

// Ceil performs a pointwise ceil.
type Ceil struct{}

// Constructor to fulfil the interface ...
func (a *Ceil) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewCeilOperation()(g, n.(*engine.Node))
	}
}

// Floor performs a pointwise floor.
type Floor struct{}

// Constructor to fulfil the interface ...
func (a *Floor) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewFloorOperation()(g, n.(*engine.Node))
	}
}

// Sin performs a pointwise sin.
type Sin struct{}

// Constructor to fulfil the interface ...
func (a *Sin) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewSinOperation()(g, n.(*engine.Node))
	}
}

// Cos performs a pointwise cos.
type Cos struct{}

// Constructor to fulfil the interface ...
func (a *Cos) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewCosOperation()(g, n.(*engine.Node))
	}
}

// Exp performs a pointwise exp.
type Exp struct{}

// Constructor to fulfil the interface ...
func (a *Exp) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewExpOperation()(g, n.(*engine.Node))
	}
}

// Log performs a pointwise log.
type Log struct{}

// Constructor to fulfil the interface ...
func (a *Log) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewLogOperation()(g, n.(*engine.Node))
	}
}

// Log2 performs a pointwise log2.
type Log2 struct{}

// Constructor to fulfil the interface ...
func (a *Log2) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewLog2Operation()(g, n.(*engine.Node))
	}
}

// Neg performs a pointwise neg.
type Neg struct{}

// Constructor to fulfil the interface ...
func (a *Neg) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewNegOperation()(g, n.(*engine.Node))
	}
}

// Square performs a pointwise square.
type Square struct{}

// Constructor to fulfil the interface ...
func (a *Square) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewSquareOperation()(g, n.(*engine.Node))
	}
}

// Sqrt performs a pointwise sqrt.
type Sqrt struct{}

// Constructor to fulfil the interface ...
func (a *Sqrt) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewSqrtOperation()(g, n.(*engine.Node))
	}
}

// Inverse performs a pointwise inverse.
type Inverse struct{}

// Constructor to fulfil the interface ...
func (a *Inverse) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewInverseOperation()(g, n.(*engine.Node))
	}
}

// InverseSqrt performs a pointwise inversesqrt.
type InverseSqrt struct{}

// Constructor to fulfil the interface ...
func (a *InverseSqrt) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewInverseSqrtOperation()(g, n.(*engine.Node))
	}
}

// Cube performs a pointwise cube.
type Cube struct{}

// Constructor to fulfil the interface ...
func (a *Cube) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewCubeOperation()(g, n.(*engine.Node))
	}
}

// Tanh performs a pointwise tanh.
type Tanh struct{}

// Constructor to fulfil the interface ...
func (a *Tanh) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewTanhOperation()(g, n.(*engine.Node))
	}
}

// Sigmoid performs a pointwise sigmoid.
type Sigmoid struct{}

// Constructor to fulfil the interface ...
func (a *Sigmoid) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewSigmoidOperation()(g, n.(*engine.Node))
	}
}

// Log1p performs a pointwise log1p.
type Log1p struct{}

// Constructor to fulfil the interface ...
func (a *Log1p) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewLog1pOperation()(g, n.(*engine.Node))
	}
}

// Expm1 performs a pointwise expm1.
type Expm1 struct{}

// Constructor to fulfil the interface ...
func (a *Expm1) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewExpm1Operation()(g, n.(*engine.Node))
	}
}

// Softplus performs a pointwise softplus.
type Softplus struct{}

// Constructor to fulfil the interface ...
func (a *Softplus) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewSoftplusOperation()(g, n.(*engine.Node))
	}
}

// Sub performs a pointwise sub.
type Sub struct{}

// Constructor to fulfil the interface ...
func (a *Sub) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewSubOperation(nil, nil)(g, n.(*engine.Node))
	}
}

// HadamardDiv performs a pointwise hadamarddiv.
type HadamardDiv struct{}

// Constructor to fulfil the interface ...
func (a *HadamardDiv) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewHadamardDivOperation(nil, nil)(g, n.(*engine.Node))
	}
}

// Pow performs a pointwise pow.
type Pow struct{}

// Constructor to fulfil the interface ...
func (a *Pow) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewPowOperation(nil, nil)(g, n.(*engine.Node))
	}
}

// Lt performs a pointwise lt.
type Lt struct{}

// Constructor to fulfil the interface ...
func (a *Lt) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewLtOperation(nil, nil, false)(g, n.(*engine.Node))
	}
}

// Gt performs a pointwise gt.
type Gt struct{}

// Constructor to fulfil the interface ...
func (a *Gt) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewGtOperation(nil, nil, false)(g, n.(*engine.Node))
	}
}

// Lte performs a pointwise lte.
type Lte struct{}

// Constructor to fulfil the interface ...
func (a *Lte) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewLteOperation(nil, nil, false)(g, n.(*engine.Node))
	}
}

// Gte performs a pointwise gte.
type Gte struct{}

// Constructor to fulfil the interface ...
func (a *Gte) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewGteOperation(nil, nil, false)(g, n.(*engine.Node))
	}
}

// Eq performs a pointwise eq.
type Eq struct{}

// Constructor to fulfil the interface ...
func (a *Eq) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewEqOperation(nil, nil, false)(g, n.(*engine.Node))
	}
}

// Ne performs a pointwise ne.
type Ne struct{}

// Constructor to fulfil the interface ...
func (a *Ne) Constructor() func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
	return func(g graph.WeightedDirected, n graph.Node) (interface{}, error) {
		return engine.NewNeOperation(nil, nil, false)(g, n.(*engine.Node))
	}
}
